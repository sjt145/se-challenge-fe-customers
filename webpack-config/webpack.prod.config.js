const path = require("path");
const glob = require("glob");
const Webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const TerserPlugin = require("terser-webpack-plugin");
const {CleanWebpackPlugin} = require("clean-webpack-plugin");
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const PurgeCssPlugin = require("purgecss-webpack-plugin");
const JsonMinimizerPlugin = require("json-minimizer-webpack-plugin");
const CompressionPlugin = require("compression-webpack-plugin");

const prodEnv = require("../config/prod.env");
const testEnv = require("../config/test.env");

const parentDir = path.join(__dirname, "../");
const srcPath = path.join(parentDir, "src");
const buildPath = path.join(parentDir, "/build");

module.exports = (env) => {
  const envConfig = env === "production" ? prodEnv : testEnv;
  return {
    mode: "production",
    entry: ["@babel/polyfill", path.join(parentDir, "/src/index.tsx")],
    output: {
      path: buildPath,
      filename: "[name].[fullhash:8].bundle.js",
      //sourceMapFilename: "[name].[fullhash:8].bundle.js.map",
      chunkFilename: "[name].[fullhash:8].chunk.js",
      publicPath: "/"
    },
    performance: {
      hints: false,
      maxEntrypointSize: 512000,
      maxAssetSize: 512000
    },
    devtool: "hidden-source-map",
    devServer: {
      static: buildPath,
      port: 8081,
      historyApiFallback: true,
      open: true,
      compress: true
    },
    resolve: {
      extensions: ["*", ".js", ".jsx", ".json", ".ts", ".tsx"],
      alias: {
        "@": srcPath, // shortcut to reference src folder from anywhere
        "@/shared": path.join(srcPath, "shared/"),
        "@/http": path.join(srcPath, "http/"),
        "@redux": path.join(srcPath, "redux/"),
        "@/constants": path.join(srcPath, "constants/"),
        "@/pages": path.join(srcPath, "pages/"),
        "@/utils": path.join(srcPath, "utils/"),
        "@/assets": path.join(srcPath, "assets/")
      },
    },
    module: {
      rules: [{
        test: /\.(ts|tsx)$/,
        loader: "ts-loader",
      }, {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {      // The object assigned to "option" field can alternatively moved to ".babelrc" file
            presets: [
              "@babel/preset-env",
              "@babel/preset-react"
            ],
            plugins: [
              "module:@babel/plugin-proposal-class-properties"
            ]
          }
        }
      }, {
        test: /\.html$/,
        use: "html-loader"
      }, {
        test: /\.handlebars/,
        use: "handlebars-loader",
        exclude: /node_modules/
      }, {
        test: /\.css$/,
        use: [{
          loader: MiniCssExtractPlugin.loader,
          options: {
            esModule: true
          }
        }, {
          loader: "css-loader",
          options: {
            sourceMap: false
          }
        }],
      }, {
        test: /\.scss$/,
        use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"]
      }, {
        test: /\.(png|svg|jpg|jpeg|gif)$/,
        use: [{
          loader: "file-loader",
          options: {
            outputPath: "images",
          }
        }],
      }, {
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        use: [{
          loader: "file-loader",
          options: {
            outputPath: "fonts",
          }
        }],
      }]
    },
    plugins: [
      new Webpack.DefinePlugin({
        "process.env": envConfig
      }),
      new HtmlWebpackPlugin({
        template: path.join(parentDir, "./public/index.hbs"),
        inject: true,
        process: {
          env: {
          }
        },
        minify: {
          collapseBooleanAttributes: true,
          collapseInlineTagWhitespace: true,
          collapseWhitespace: true,
          conservativeCollapse: true,
          html5: true,
          includeAutoGeneratedTags: true,
          removeComments: true,
          removeRedundantAttributes: true,
          removeScriptTypeAttributes: true,
          removeStyleLinkTypeAttributes: true,
          useShortDoctype: true
        }
      }),
      new MiniCssExtractPlugin({
        filename: "[name].[fullhash:8].css",
        chunkFilename: "[id].[name].[fullhash:8].chunk.css",
      }),
      new PurgeCssPlugin({
        paths: glob.sync(`${srcPath}/**/*`, {nodir: true}),
      }),
      new CleanWebpackPlugin(),
      new CompressionPlugin({
        algorithm: "gzip",
      }),
    ],
    optimization: {
      minimize: true,
      splitChunks: {
        chunks: "all",
      },
      minimizer: [
        new JsonMinimizerPlugin(),
        new CssMinimizerPlugin({
          minimizerOptions: {
            preset: ["default", {discardComments: {removeAll: true}}],
          },
          parallel: true
        }),
        new TerserPlugin({
          parallel: true,
          extractComments: true,
          terserOptions: {
            compress: true,
            mangle: true,
            format: {
              comments: false
            }
          }
        })
      ],
    }
  }
};
